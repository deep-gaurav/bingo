schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: Subscription
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Bingo {
  gameState: GameState!
  boardSize: Int!
}

type BingoInputs {
  startGame(boardSize: Int!): Boolean!
  readyBoard(board: [[Int!]!]!): Boolean!
  playerMove(number: Int!): Boolean!
}

type BingoPlayerData {
  board: Board
}

type Board {
  numbers: [[Int!]!]!
  score(roomId: String!): Int!
}

type BoardCreation {
  ready: [String!]!
}

type Boxes {
  verticalEdges: [EdgeType!]!
  horizontalEdges: [EdgeType!]!
  cells: [Cell!]!
  width: Int!
  height: Int!
  turn: String!
}

type BoxesInputs {
  startGame(boardWidth: Int!, boardHeight: Int!): Boolean!
  playerMove(edgeId: Int!): Boolean!
}

type BoxesPlayerData {
  color: String!
  score(roomId: String!): Int!
}

type Cell {
  occupiedBy: String
}

interface CommonPlayer {
  isConnected: Boolean!
}

union EdgeType = Occupied | Unoccupied

union Game = Bingo | Boxes

type GameData {
  players: [GamePlayer!]!
  game: Game!
  leaderboard: [Rank!]!
}

union GameEvents = GameStarted | RoomUpdate

type GameInputs {
  bingoInputs: BingoInputs!
  boxesInputs: BoxesInputs!
}

type GameMessage {
  event: GameEvents!
  room: Room!
}

type GamePlayer implements CommonPlayer {
  player: Player!
  data: PlayerGameData!
  isConnected: Boolean!
}

type GameRunning {
  turn: String!
  selectedNumbers: [SelectedCell!]!
}

type GameStarted {
  game: Game!
}

union GameState = BoardCreation | GameRunning

type LastGame {
  lastGame: GameData!
  leaderBoard: [Rank!]!
}

type LobbyData {
  players: [LobbyPlayer!]!
  lastGame: LastGame
}

type LobbyPlayer implements CommonPlayer {
  player: Player!
  isConnected: Boolean!
}

type MutationRoot {
  createLobby(playerId: String!, playerName: String!): String!
  joinLobby(playerId: String!, playerName: String!, roomId: String!): String!
  disconnect(playerId: String!, roomId: String!): String!
}

type Occupied {
  movNo: Int!
  occupiedBy: String!
  id: Int!
}

type Player {
  id: String!
  name: String!
}

type PlayerConnected {
  player: Player!
  room: Room!
}

union PlayerGameData = BingoPlayerData | BoxesPlayerData

type PlayerJoined {
  player: Player!
  room: Room!
}

type PlayerLeft {
  player: Player!
  room: Room!
}

type PlayerRemoved {
  player: Player!
  room: Room!
}

type QueryRoot {
  hello: String!
  gameEvent(playerId: String!, roomId: String!): GameInputs!
  ping: String!
}

type Rank {
  rank: Int!
  player: Player!
}

type Room {
  id: String!
  state: RoomState!
  players: [CommonPlayer!]!
}

union RoomState = LobbyData | GameData

type RoomUpdate {
  room: Room!
}

type SelectedCell {
  cellValue: Int!
  selectedBy: String!
}

union ServerResponse =
    PlayerJoined
  | PlayerConnected
  | PlayerLeft
  | PlayerRemoved
  | GameMessage

type Subscription {
  serverMessages(roomId: String!, playerId: String!): ServerResponse!
}

type Unoccupied {
  id: Int!
}
